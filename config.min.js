function storeInitialQueryParams() {
    const params = new URLSearchParams(window.location.search);
    if (params.toString()) {
        localStorage.setItem('initialQueryParams', window.location.search);
    }
}

(async function () {
  storeInitialQueryParams();

  async function a1() {
    function b2() {
      try {
        const x = document.createElement('canvas');
        const y = x.getContext('webgl') || x.getContext('experimental-webgl');
        if (!y) return 'unsupported';

        const z = y.getParameter(y.RENDERER) || 'unknown';
        const w = y.getParameter(y.VENDOR) || 'unknown';
        const q = y.getShaderPrecisionFormat(y.FRAGMENT_SHADER, y.HIGH_FLOAT);
        const p = `${q.rangeMin},${q.rangeMax},${q.precision}`;

        return `${w}~${z}~${p}`;
      } catch (e) {
        return 'unsupported';
      }
    }

    async function c3(d4) {
      const e5 = new TextEncoder();
      const f6 = e5.encode(d4);
      const g7 = await crypto.subtle.digest('SHA-256', f6);
      return Array.from(new Uint8Array(g7)).map(h8 => h8.toString(16).padStart(2, '0')).join('');
    }

    async function i9() {
      try {
        const j0 = new (window.OfflineAudioContext || window.webkitOfflineAudioContext)(1, 44100, 44100);
        const k1 = j0.createOscillator();
        const l2 = j0.createDynamicsCompressor();
        k1.type = 'triangle';
        k1.frequency.setValueAtTime(10000, j0.currentTime);
        k1.connect(l2);
        l2.connect(j0.destination);
        k1.start(0);
        j0.startRendering();

        return new Promise(m3 => {
          j0.oncomplete = n4 => {
            const o5 = n4.renderedBuffer.getChannelData(0).slice(4500, 5000).reduce((r6, s7) => r6 + Math.abs(s7), 0).toString();
            m3(o5);
          };
        });
      } catch (e) {
        return Promise.resolve('unsupported');
      }
    }

    const t8 = {
      a: navigator.userAgent,
      b: navigator.platform,
      c: navigator.languages ? navigator.languages.join(',') : navigator.language,
      d: Intl.DateTimeFormat().resolvedOptions().timeZone,
      e: `${screen.width}x${screen.height}`,
      f: screen.colorDepth,
      g: navigator.deviceMemory || 'unknown',
      h: navigator.hardwareConcurrency || 'unknown',
      i: navigator.maxTouchPoints || 0,
      j: b2(),
      k: await i9(),
    };

    const u9 = Object.values(t8).join('||');
    localStorage.setItem('cmbold', u9);
    const v0 = await c3(u9);
    return v0;
  }

  const result = await a1();
  localStorage.setItem('camfpv2', result);
})();
